//
// Created by Cem Gokmen on 8/12/18.
//
#include <iomanip>
#include "TextResultEmitter.h"

unsigned int digits(unsigned int v)
{
    return 1 + ((v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :
                                                               (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :
                                                                                                        (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0);
}

TextResultEmitter::TextResultEmitter() {
    oss = new std::stringstream();
    num_passed = 0;
    runs = 0;
}

TextResultEmitter::~TextResultEmitter() {
    delete oss;
}

void TextResultEmitter::add_suite(lc3_test_suite &suite, const std::string &filename) {
    last_suite = suite;

    std::stringstream inner_oss;
    lc3_write_test_report(inner_oss, suite, filename);

    *oss << "Run " << (runs + 1) << ": ";
    *oss << inner_oss.str() << "\n";

    if (suite.passed) num_passed++;

    suite_summary summary;
    summary.grade = suite.points;
    for (const auto& test : suite.tests)
    {
        if (test.passed) summary.tests++;
        summary.warnings += test.warnings;
        summary.executions += test.executions;
    }
    results.push_back(summary);

    runs++;
}

void TextResultEmitter::emit_results(std::ostream &os) {
    if (runs > 1)
    {
        *oss << "Overall results\n";
        *oss << "----------------\n\n";
        for (unsigned int i = 0; i < results.size(); i++)
        {
            const auto& summary = results[i];
            *oss << "Run " << std::setw(digits(runs)) << (i+1) << " Grade: " << std::setw(3) << summary.grade << "/" << last_suite.max_points << " Tests Passed: " << summary.tests << "/" << last_suite.tests.size() << " Executions: " << summary.executions << " Warnings: " << summary.warnings << "\n";
        }
    }

    os << oss->str() << "If you have any questions about the output, then please include the full output generated by this program in your email / piazza post!\n";
}